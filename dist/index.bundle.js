"use strict";(self.webpackChunkleaderboard=self.webpackChunkleaderboard||[]).push([[826],{405:()=>{const e=document.querySelector(".refresh"),t=(document.querySelector(".add-btn"),document.querySelector(".form")),s=document.querySelector(".score-list"),a=document.querySelector(".message"),n=document.querySelector(".game-title"),r="https://us-central1-js-capstone-backend.cloudfunctions.net/api/",o=class{static createGame=async e=>{const t=await fetch(`${r}games`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});return await t.json()};static getScores=async e=>{const t=await fetch(`${r}games/${e}/scores`);return await t.json()};static createGameScore=async(e,t)=>{const s=await fetch(`${r}games/${e}/scores`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});return await s.json()}},[c,i]=t.elements,l={name:"House of Dragons"};n.innerHTML=`${l.name} - Leaderboard`,document.addEventListener("DOMContentLoaded",(()=>{JSON.parse(localStorage.getItem("game"))??o.createGame(l).then((e=>{const t=e.result.split(" ")[3],s=new class{constructor(e,t){this.id=t,this.name=e}}(l.name,t);localStorage.setItem("game",JSON.stringify(s))}))})),t.addEventListener("submit",(e=>{e.preventDefault();const s={user:c.value,score:Number(i.value)},n=JSON.parse(localStorage.getItem("game"));o.createGameScore(n.id,s).then((e=>{a.style.display="block",a.innerHTML=e.result,setTimeout((()=>{a.style.display="none"}),5e3),t.reset()}))})),e.addEventListener("click",(()=>{d(),s.style.display="block"}));const d=async()=>{const e=JSON.parse(localStorage.getItem("game")),t=await o.getScores(e.id);s.innerHTML=t.result.map((e=>`<li class="score-item list-group-item d-flex justify-content-between align-items-center">${e.user}<span class="badge bg-primary rounded-pill">${e.score}</span></li>`)).join(""),s.style.display="block"}}},e=>{e(e.s=405)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguYnVuZGxlLmpzIiwibWFwcGluZ3MiOiJtR0FDQSxNQUFNQSxFQUFhQyxTQUFTQyxjQUFjLFlBRXBDLEdBRFlELFNBQVNDLGNBQWMsWUFDNUJELFNBQVNDLGNBQWMsVUFDOUJDLEVBQVlGLFNBQVNDLGNBQWMsZUFDbkNFLEVBQU1ILFNBQVNDLGNBQWMsWUFDN0JHLEVBQVlKLFNBQVNDLGNBQWMsZUNIbkNJLEVBQ0osa0VBOEJGLEVBNUJBLE1BRUVDLGtCQUFvQkMsTUFBT0MsSUFDekIsTUFBTUMsUUFBWUMsTUFBTSxHQUFHTCxTQUFpQixDQUMxQ00sT0FBUSxPQUNSQyxRQUFTLENBQUUsZUFBZ0Isb0JBQzNCQyxLQUFNQyxLQUFLQyxVQUFVUCxLQUV2QixhQUFhQyxFQUFJTyxNQUFNLEVBSXpCVixpQkFBbUJDLE1BQU9VLElBQ3hCLE1BQU1SLFFBQVlDLE1BQU0sR0FBR0wsVUFBaUJZLFlBQzVDLGFBQWFSLEVBQUlPLE1BQU0sRUFJekJWLHVCQUF5QkMsTUFBT1UsRUFBSUMsS0FDbEMsTUFBTVQsUUFBWUMsTUFBTSxHQUFHTCxVQUFpQlksV0FBYSxDQUN2RE4sT0FBUSxPQUNSQyxRQUFTLENBQUUsZUFBZ0Isb0JBQzNCQyxLQUFNQyxLQUFLQyxVQUFVRyxLQUV2QixhQUFhVCxFQUFJTyxNQUFNLElDakJwQixFQUFNRyxHQUFTLFdBRWhCWCxFQUFPLENBQ1hZLEtBQU0sb0JBR1JoQixFQUFVaUIsVUFBWSxHQUFHYixFQUFLWSxxQkFHOUJwQixTQUFTc0IsaUJBQWlCLG9CQUFvQixLQUMvQlIsS0FBS1MsTUFBTUMsYUFBYUMsUUFBUSxVQUUzQyxhQUFlakIsR0FBTWtCLE1BQU1qQixJQUN6QixNQUNNUSxFQURRUixFQUFJa0IsT0FBT0MsTUFBTSxLQUNkLEdBQ1hDLEVBQWUsSUM1QjNCLE1BQ0VDLFlBQVlWLEVBQU1ILEdBQ2hCYyxLQUFLZCxHQUFLQSxFQUNWYyxLQUFLWCxLQUFPQSxDQUNkLEdEd0JrQ1osRUFBS1ksS0FBTUgsR0FDekNPLGFBQWFRLFFBQVEsT0FBUWxCLEtBQUtDLFVBQVVjLEdBQWMsR0FDMUQsSUFHTixtQkFBc0IsVUFBV0ksSUFDL0JBLEVBQUVDLGlCQUNGLE1BQU1oQixFQUFZLENBQ2hCaUIsS0FBTSxFQUFLQyxNQUNYakIsTUFBT2tCLE9BQU9sQixFQUFNaUIsUUFFaEI1QixFQUFPTSxLQUFLUyxNQUFNQyxhQUFhQyxRQUFRLFNBQzdDLGtCQUNtQmpCLEVBQUtTLEdBQUlDLEdBRXpCUSxNQUFNakIsSUFDTE4sRUFBSW1DLE1BQU1DLFFBQVUsUUFDcEJwQyxFQUFJa0IsVUFBWVosRUFBSWtCLE9BQ3BCYSxZQUFXLEtBQ1RyQyxFQUFJbUMsTUFBTUMsUUFBVSxNQUFNLEdBQ3pCLEtBQ0gsU0FBWSxHQUNaLElBSU54QyxFQUFXdUIsaUJBQWlCLFNBQVMsS0FDbkNtQixJQUNBdkMsRUFBVW9DLE1BQU1DLFFBQVUsT0FBTyxJQUduQyxNQUFNRSxFQUFpQmxDLFVBQ3JCLE1BQU1DLEVBQU9NLEtBQUtTLE1BQU1DLGFBQWFDLFFBQVEsU0FDdkNpQixRQUFlLFlBQWNsQyxFQUFLUyxJQUN4Q2YsRUFBVW1CLFVBQVlxQixFQUFPZixPQUMxQmdCLEtBQ0V4QixHQUFVLDRGQUE0RkEsRUFBTWdCLG1EQUFtRGhCLEVBQU1BLHNCQUV2S3lCLEtBQUssSUFFUjFDLEVBQVVvQyxNQUFNQyxRQUFVLE9BQU8sQyIsInNvdXJjZXMiOlsid2VicGFjazovL2xlYWRlcmJvYXJkLy4vc3JjL21vZHVsZXMvRE9NRWxlbWVudHMuanMiLCJ3ZWJwYWNrOi8vbGVhZGVyYm9hcmQvLi9zcmMvbW9kdWxlcy9TZXJ2aWNlcy5qcyIsIndlYnBhY2s6Ly9sZWFkZXJib2FyZC8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly9sZWFkZXJib2FyZC8uL3NyYy9tb2R1bGVzL0dhbWUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgb2JqZWN0LWN1cmx5LW5ld2xpbmUgKi9cbmNvbnN0IHJlZnJlc2hCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucmVmcmVzaCcpO1xuY29uc3Qgc3VibWl0QnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFkZC1idG4nKTtcbmNvbnN0IGZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZm9ybScpO1xuY29uc3Qgc2NvcmVMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNjb3JlLWxpc3QnKTtcbmNvbnN0IG1zZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tZXNzYWdlJyk7XG5jb25zdCBnYW1lVGl0bGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZ2FtZS10aXRsZScpO1xuXG5leHBvcnQgeyByZWZyZXNoQnRuLCBzdWJtaXRCdG4sIGZvcm0sIHNjb3JlTGlzdCwgbXNnLCBnYW1lVGl0bGUgfTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIGltcGxpY2l0LWFycm93LWxpbmVicmVhayAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcmV0dXJuLWF3YWl0ICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgb3BlcmF0b3ItbGluZWJyZWFrXG5jb25zdCBCQVNFX1VSTCA9XG4gICdodHRwczovL3VzLWNlbnRyYWwxLWpzLWNhcHN0b25lLWJhY2tlbmQuY2xvdWRmdW5jdGlvbnMubmV0L2FwaS8nO1xuXG5jbGFzcyBBUEkge1xuICAvLyAvZ2FtZXMvXG4gIHN0YXRpYyBjcmVhdGVHYW1lID0gYXN5bmMgKGdhbWUpID0+IHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaChgJHtCQVNFX1VSTH1nYW1lc2AsIHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShnYW1lKSxcbiAgICB9KTtcbiAgICByZXR1cm4gYXdhaXQgcmVzLmpzb24oKTtcbiAgfTtcblxuICAvLyAvZ2FtZXMvOmlkL3Njb3Jlcy9cbiAgc3RhdGljIGdldFNjb3JlcyA9IGFzeW5jIChpZCkgPT4ge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKGAke0JBU0VfVVJMfWdhbWVzLyR7aWR9L3Njb3Jlc2ApO1xuICAgIHJldHVybiBhd2FpdCByZXMuanNvbigpO1xuICB9O1xuXG4gIC8vIC9nYW1lcy86aWQvc2NvcmVzL1xuICBzdGF0aWMgY3JlYXRlR2FtZVNjb3JlID0gYXN5bmMgKGlkLCB1c2VyU2NvcmUpID0+IHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaChgJHtCQVNFX1VSTH1nYW1lcy8ke2lkfS9zY29yZXNgLCB7XG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIGhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9LFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkodXNlclNjb3JlKSxcbiAgICB9KTtcbiAgICByZXR1cm4gYXdhaXQgcmVzLmpzb24oKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgQVBJO1xuIiwiLyogZXNsaW50LWRpc2FibGUgb3BlcmF0b3ItbGluZWJyZWFrICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtZXhwcmVzc2lvbnMgKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVzZS1iZWZvcmUtZGVmaW5lICovXG5pbXBvcnQge1xuICByZWZyZXNoQnRuLFxuICBmb3JtLFxuICBzY29yZUxpc3QsXG4gIG1zZyxcbiAgZ2FtZVRpdGxlLFxufSBmcm9tICcuL21vZHVsZXMvRE9NRWxlbWVudHMuanMnO1xuaW1wb3J0IGFwaSBmcm9tICcuL21vZHVsZXMvU2VydmljZXMuanMnO1xuaW1wb3J0IEdhbWUgZnJvbSAnLi9tb2R1bGVzL0dhbWUuanMnO1xuXG5jb25zdCBbbmFtZSwgc2NvcmVdID0gZm9ybS5lbGVtZW50cztcblxuY29uc3QgZ2FtZSA9IHtcbiAgbmFtZTogJ0hvdXNlIG9mIERyYWdvbnMnLFxufTtcblxuZ2FtZVRpdGxlLmlubmVySFRNTCA9IGAke2dhbWUubmFtZX0gLSBMZWFkZXJib2FyZGA7XG5cbi8vIHJ1biBmdW5jdGlvbiBpZiBkYXRhIGlzIG51bGxcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoKSA9PiB7XG4gIGNvbnN0IGRhdGEgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdnYW1lJykpO1xuICBkYXRhID8/XG4gICAgYXBpLmNyZWF0ZUdhbWUoZ2FtZSkudGhlbigocmVzKSA9PiB7XG4gICAgICBjb25zdCBzcGxpdCA9IHJlcy5yZXN1bHQuc3BsaXQoJyAnKTtcbiAgICAgIGNvbnN0IGlkID0gc3BsaXRbM107XG4gICAgICBjb25zdCBnYW1lSW5zdGFuY2UgPSBuZXcgR2FtZShnYW1lLm5hbWUsIGlkKTtcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdnYW1lJywgSlNPTi5zdHJpbmdpZnkoZ2FtZUluc3RhbmNlKSk7XG4gICAgfSk7XG59KTtcblxuZm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCAoZSkgPT4ge1xuICBlLnByZXZlbnREZWZhdWx0KCk7XG4gIGNvbnN0IHVzZXJTY29yZSA9IHtcbiAgICB1c2VyOiBuYW1lLnZhbHVlLFxuICAgIHNjb3JlOiBOdW1iZXIoc2NvcmUudmFsdWUpLFxuICB9O1xuICBjb25zdCBnYW1lID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnZ2FtZScpKTtcbiAgYXBpXG4gICAgLmNyZWF0ZUdhbWVTY29yZShnYW1lLmlkLCB1c2VyU2NvcmUpXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gICAgLnRoZW4oKHJlcykgPT4ge1xuICAgICAgbXNnLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgbXNnLmlubmVySFRNTCA9IHJlcy5yZXN1bHQ7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgbXNnLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICB9LCA1MDAwKTtcbiAgICAgIGZvcm0ucmVzZXQoKTtcbiAgICB9KTtcbn0pO1xuXG4vLyBHZXQgYWxsIHNjb3Jlc1xucmVmcmVzaEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgZmV0Y2hBbGxTY29yZXMoKTtcbiAgc2NvcmVMaXN0LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xufSk7XG5cbmNvbnN0IGZldGNoQWxsU2NvcmVzID0gYXN5bmMgKCkgPT4ge1xuICBjb25zdCBnYW1lID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnZ2FtZScpKTtcbiAgY29uc3Qgc2NvcmVzID0gYXdhaXQgYXBpLmdldFNjb3JlcyhnYW1lLmlkKTtcbiAgc2NvcmVMaXN0LmlubmVySFRNTCA9IHNjb3Jlcy5yZXN1bHRcbiAgICAubWFwKFxuICAgICAgKHNjb3JlKSA9PiBgPGxpIGNsYXNzPVwic2NvcmUtaXRlbSBsaXN0LWdyb3VwLWl0ZW0gZC1mbGV4IGp1c3RpZnktY29udGVudC1iZXR3ZWVuIGFsaWduLWl0ZW1zLWNlbnRlclwiPiR7c2NvcmUudXNlcn08c3BhbiBjbGFzcz1cImJhZGdlIGJnLXByaW1hcnkgcm91bmRlZC1waWxsXCI+JHtzY29yZS5zY29yZX08L3NwYW4+PC9saT5gLFxuICAgIClcbiAgICAuam9pbignJyk7XG5cbiAgc2NvcmVMaXN0LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xufTtcbiIsImNsYXNzIEdhbWUge1xuICBjb25zdHJ1Y3RvcihuYW1lLCBpZCkge1xuICAgIHRoaXMuaWQgPSBpZDtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEdhbWU7XG4iXSwibmFtZXMiOlsicmVmcmVzaEJ0biIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsInNjb3JlTGlzdCIsIm1zZyIsImdhbWVUaXRsZSIsIkJBU0VfVVJMIiwic3RhdGljIiwiYXN5bmMiLCJnYW1lIiwicmVzIiwiZmV0Y2giLCJtZXRob2QiLCJoZWFkZXJzIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJqc29uIiwiaWQiLCJ1c2VyU2NvcmUiLCJzY29yZSIsIm5hbWUiLCJpbm5lckhUTUwiLCJhZGRFdmVudExpc3RlbmVyIiwicGFyc2UiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwidGhlbiIsInJlc3VsdCIsInNwbGl0IiwiZ2FtZUluc3RhbmNlIiwiY29uc3RydWN0b3IiLCJ0aGlzIiwic2V0SXRlbSIsImUiLCJwcmV2ZW50RGVmYXVsdCIsInVzZXIiLCJ2YWx1ZSIsIk51bWJlciIsInN0eWxlIiwiZGlzcGxheSIsInNldFRpbWVvdXQiLCJmZXRjaEFsbFNjb3JlcyIsInNjb3JlcyIsIm1hcCIsImpvaW4iXSwic291cmNlUm9vdCI6IiJ9